# Learnbot Move Q
#
# Move the robot based on learnt behaviours
# The learnings must be specified in the Q table

# Import standard modules
import numpy as np
from time import sleep
import random

# Import core learnbot code, for robot movement
from learnbot import *

np.set_printoptions(suppress=True)


# Q table
# Store our learnings about good movement paths to take
# This is generated by running learnbot_learn_q.py
""" Sample Q
Q = [[  0, 911, 684, 438, 520,   0],
     [  0, 679, 850,   0,   0,   0],
     [  0,   0, 287,   0,   0, 395],
     [619, 664, 561, 481,   0,   0],
     [690, 696, 784,   0, 448, 321],
     [  0,   0, 313, 411, 553,   0]]     
"""     

# Load the Q table from file
# This was generated by the Learn Q process
try:
    Q = np.load("q.npy")
    for i in range(len(Q)):
        Q[i][0][i] = -9999
except:
    print("Could not load q.npy")
print(Q)


def moveNextBest(bot, state):
    """Given the current state, picks the best next state and moves to it"""

    # Get options from this state
    row = Q[state]
    #print(options)

    # Find the best (i.e. max) value in the row
    best_value = np.max(row)

    # Find the actions/next states corresponding to the best value
    actions, next_states = np.where(row == best_value)    

    # If we have more than one, choose one at random
    next_state = random.choice(next_states)    

    print("Move to", next_state)

    # Move to that position
    bot.moveTo(bot.state_codes[next_state])

    return next_state


# Move based on learnt movements
def move():
    # Make a random initial movement
    state = bot.moveRandom()
    print("Start at", state)

    # Now loop, moving to the next best position
    while True:
        state = moveNextBest(bot, state)
        sleep(MOVE_Q_WAIT_BETWEEN_MOVES)




# Main
# -------------------------------------------------------------------------------------------------

# Create the bot
bot = Learnbot(SERVOS)


# Start it up
bot.wakeSlowly(2) 

# Make it move according to the learnings
move()
