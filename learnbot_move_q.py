# Learnbot Move Q
#
# Move the robot based on learnt behaviours
# The learnings must be specified in the Q table

# Import standard modules
import numpy as np
from time import sleep

# Import core learnbot code, for robot movement
from learnbot import *

np.set_printoptions(suppress=True)


# Q matrix
# Store our learnings about good movement paths to take
# This is generated by running learnbot_learn_q.py
Q = [[  0, 911, 684, 438, 520,   0],
     [  0, 679, 850,   0,   0,   0],
     [  0,   0, 287,   0,   0, 395],
     [619, 664, 561, 481,   0,   0],
     [690, 696, 784,   0, 448, 321],
     [  0,   0, 313, 411, 553,   0]]     

# Mapping from state to joint positions
indices=['00','01','02','10','11','12']

def moveNextBest(bot, state):
    """Given the current state, picks the best next state and moves to it"""

    # Get options from this state
    options = Q[state]
    print(options)

    # Choose the option with the highest Q-value
    best = np.argmax(options, axis=0)
    print(best)

    # Move to that position
    bot.moveTo(indices[best])

    return best


# Move based on learnt movements
def move():
    # Make a random initial movement
    state = bot.moveRandom()

    # Now loop, moving to the next best position
    while True:
        state = moveNextBest(bot, state)
        sleep(3)




# Main
# -------------------------------------------------------------------------------------------------

# Create the bot
bot = Learnbot()


# Start it up
bot.wakeSlowly(2) 

# Make it move according to the learnings
move()
